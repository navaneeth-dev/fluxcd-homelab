// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getClusterHealth(args: GetClusterHealthArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterHealthResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("talos:index/getClusterHealth:getClusterHealth", {
        "clientConfiguration": args.clientConfiguration,
        "controlPlaneNodes": args.controlPlaneNodes,
        "endpoints": args.endpoints,
        "skipKubernetesChecks": args.skipKubernetesChecks,
        "timeouts": args.timeouts,
        "workerNodes": args.workerNodes,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusterHealth.
 */
export interface GetClusterHealthArgs {
    clientConfiguration: inputs.GetClusterHealthClientConfiguration;
    controlPlaneNodes: string[];
    endpoints: string[];
    skipKubernetesChecks?: boolean;
    timeouts?: inputs.GetClusterHealthTimeouts;
    workerNodes?: string[];
}

/**
 * A collection of values returned by getClusterHealth.
 */
export interface GetClusterHealthResult {
    readonly clientConfiguration: outputs.GetClusterHealthClientConfiguration;
    readonly controlPlaneNodes: string[];
    readonly endpoints: string[];
    readonly id: string;
    readonly skipKubernetesChecks?: boolean;
    readonly timeouts?: outputs.GetClusterHealthTimeouts;
    readonly workerNodes?: string[];
}
export function getClusterHealthOutput(args: GetClusterHealthOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterHealthResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("talos:index/getClusterHealth:getClusterHealth", {
        "clientConfiguration": args.clientConfiguration,
        "controlPlaneNodes": args.controlPlaneNodes,
        "endpoints": args.endpoints,
        "skipKubernetesChecks": args.skipKubernetesChecks,
        "timeouts": args.timeouts,
        "workerNodes": args.workerNodes,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusterHealth.
 */
export interface GetClusterHealthOutputArgs {
    clientConfiguration: pulumi.Input<inputs.GetClusterHealthClientConfigurationArgs>;
    controlPlaneNodes: pulumi.Input<pulumi.Input<string>[]>;
    endpoints: pulumi.Input<pulumi.Input<string>[]>;
    skipKubernetesChecks?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.GetClusterHealthTimeoutsArgs>;
    workerNodes?: pulumi.Input<pulumi.Input<string>[]>;
}
