// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterKubeconfigArgs, ClusterKubeconfigState } from "./clusterKubeconfig";
export type ClusterKubeconfig = import("./clusterKubeconfig").ClusterKubeconfig;
export const ClusterKubeconfig: typeof import("./clusterKubeconfig").ClusterKubeconfig = null as any;
utilities.lazyLoad(exports, ["ClusterKubeconfig"], () => require("./clusterKubeconfig"));

export { GetClientConfigurationArgs, GetClientConfigurationResult, GetClientConfigurationOutputArgs } from "./getClientConfiguration";
export const getClientConfiguration: typeof import("./getClientConfiguration").getClientConfiguration = null as any;
export const getClientConfigurationOutput: typeof import("./getClientConfiguration").getClientConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getClientConfiguration","getClientConfigurationOutput"], () => require("./getClientConfiguration"));

export { GetClusterHealthArgs, GetClusterHealthResult, GetClusterHealthOutputArgs } from "./getClusterHealth";
export const getClusterHealth: typeof import("./getClusterHealth").getClusterHealth = null as any;
export const getClusterHealthOutput: typeof import("./getClusterHealth").getClusterHealthOutput = null as any;
utilities.lazyLoad(exports, ["getClusterHealth","getClusterHealthOutput"], () => require("./getClusterHealth"));

export { GetClusterKubeconfigArgs, GetClusterKubeconfigResult, GetClusterKubeconfigOutputArgs } from "./getClusterKubeconfig";
export const getClusterKubeconfig: typeof import("./getClusterKubeconfig").getClusterKubeconfig = null as any;
export const getClusterKubeconfigOutput: typeof import("./getClusterKubeconfig").getClusterKubeconfigOutput = null as any;
utilities.lazyLoad(exports, ["getClusterKubeconfig","getClusterKubeconfigOutput"], () => require("./getClusterKubeconfig"));

export { GetImageFactoryExtensionsVersionsArgs, GetImageFactoryExtensionsVersionsResult, GetImageFactoryExtensionsVersionsOutputArgs } from "./getImageFactoryExtensionsVersions";
export const getImageFactoryExtensionsVersions: typeof import("./getImageFactoryExtensionsVersions").getImageFactoryExtensionsVersions = null as any;
export const getImageFactoryExtensionsVersionsOutput: typeof import("./getImageFactoryExtensionsVersions").getImageFactoryExtensionsVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getImageFactoryExtensionsVersions","getImageFactoryExtensionsVersionsOutput"], () => require("./getImageFactoryExtensionsVersions"));

export { GetImageFactoryOverlaysVersionsArgs, GetImageFactoryOverlaysVersionsResult, GetImageFactoryOverlaysVersionsOutputArgs } from "./getImageFactoryOverlaysVersions";
export const getImageFactoryOverlaysVersions: typeof import("./getImageFactoryOverlaysVersions").getImageFactoryOverlaysVersions = null as any;
export const getImageFactoryOverlaysVersionsOutput: typeof import("./getImageFactoryOverlaysVersions").getImageFactoryOverlaysVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getImageFactoryOverlaysVersions","getImageFactoryOverlaysVersionsOutput"], () => require("./getImageFactoryOverlaysVersions"));

export { GetImageFactoryUrlsArgs, GetImageFactoryUrlsResult, GetImageFactoryUrlsOutputArgs } from "./getImageFactoryUrls";
export const getImageFactoryUrls: typeof import("./getImageFactoryUrls").getImageFactoryUrls = null as any;
export const getImageFactoryUrlsOutput: typeof import("./getImageFactoryUrls").getImageFactoryUrlsOutput = null as any;
utilities.lazyLoad(exports, ["getImageFactoryUrls","getImageFactoryUrlsOutput"], () => require("./getImageFactoryUrls"));

export { GetImageFactoryVersionsArgs, GetImageFactoryVersionsResult, GetImageFactoryVersionsOutputArgs } from "./getImageFactoryVersions";
export const getImageFactoryVersions: typeof import("./getImageFactoryVersions").getImageFactoryVersions = null as any;
export const getImageFactoryVersionsOutput: typeof import("./getImageFactoryVersions").getImageFactoryVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getImageFactoryVersions","getImageFactoryVersionsOutput"], () => require("./getImageFactoryVersions"));

export { GetMachineConfigurationArgs, GetMachineConfigurationResult, GetMachineConfigurationOutputArgs } from "./getMachineConfiguration";
export const getMachineConfiguration: typeof import("./getMachineConfiguration").getMachineConfiguration = null as any;
export const getMachineConfigurationOutput: typeof import("./getMachineConfiguration").getMachineConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMachineConfiguration","getMachineConfigurationOutput"], () => require("./getMachineConfiguration"));

export { GetMachineDisksArgs, GetMachineDisksResult, GetMachineDisksOutputArgs } from "./getMachineDisks";
export const getMachineDisks: typeof import("./getMachineDisks").getMachineDisks = null as any;
export const getMachineDisksOutput: typeof import("./getMachineDisks").getMachineDisksOutput = null as any;
utilities.lazyLoad(exports, ["getMachineDisks","getMachineDisksOutput"], () => require("./getMachineDisks"));

export { ImageFactorySchematicArgs, ImageFactorySchematicState } from "./imageFactorySchematic";
export type ImageFactorySchematic = import("./imageFactorySchematic").ImageFactorySchematic;
export const ImageFactorySchematic: typeof import("./imageFactorySchematic").ImageFactorySchematic = null as any;
utilities.lazyLoad(exports, ["ImageFactorySchematic"], () => require("./imageFactorySchematic"));

export { MachineBootstrapArgs, MachineBootstrapState } from "./machineBootstrap";
export type MachineBootstrap = import("./machineBootstrap").MachineBootstrap;
export const MachineBootstrap: typeof import("./machineBootstrap").MachineBootstrap = null as any;
utilities.lazyLoad(exports, ["MachineBootstrap"], () => require("./machineBootstrap"));

export { MachineConfigurationApplyArgs, MachineConfigurationApplyState } from "./machineConfigurationApply";
export type MachineConfigurationApply = import("./machineConfigurationApply").MachineConfigurationApply;
export const MachineConfigurationApply: typeof import("./machineConfigurationApply").MachineConfigurationApply = null as any;
utilities.lazyLoad(exports, ["MachineConfigurationApply"], () => require("./machineConfigurationApply"));

export { MachineSecretsArgs, MachineSecretsState } from "./machineSecrets";
export type MachineSecrets = import("./machineSecrets").MachineSecrets;
export const MachineSecrets: typeof import("./machineSecrets").MachineSecrets = null as any;
utilities.lazyLoad(exports, ["MachineSecrets"], () => require("./machineSecrets"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "talos:index/clusterKubeconfig:ClusterKubeconfig":
                return new ClusterKubeconfig(name, <any>undefined, { urn })
            case "talos:index/imageFactorySchematic:ImageFactorySchematic":
                return new ImageFactorySchematic(name, <any>undefined, { urn })
            case "talos:index/machineBootstrap:MachineBootstrap":
                return new MachineBootstrap(name, <any>undefined, { urn })
            case "talos:index/machineConfigurationApply:MachineConfigurationApply":
                return new MachineConfigurationApply(name, <any>undefined, { urn })
            case "talos:index/machineSecrets:MachineSecrets":
                return new MachineSecrets(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("talos", "index/clusterKubeconfig", _module)
pulumi.runtime.registerResourceModule("talos", "index/imageFactorySchematic", _module)
pulumi.runtime.registerResourceModule("talos", "index/machineBootstrap", _module)
pulumi.runtime.registerResourceModule("talos", "index/machineConfigurationApply", _module)
pulumi.runtime.registerResourceModule("talos", "index/machineSecrets", _module)
pulumi.runtime.registerResourcePackage("talos", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:talos") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
