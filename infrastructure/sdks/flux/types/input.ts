// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BootstrapGitTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface ProviderGit {
    /**
     * Author email for Git commits.
     */
    authorEmail?: pulumi.Input<string>;
    /**
     * Author name for Git commits. Defaults to `Flux`.
     */
    authorName?: pulumi.Input<string>;
    /**
     * Branch of the repository to reconcile from. Defaults to `main`.
     */
    branch?: pulumi.Input<string>;
    /**
     * String to add to the commit messages.
     */
    commitMessageAppendix?: pulumi.Input<string>;
    /**
     * Key id for selecting a particular GPG key.
     */
    gpgKeyId?: pulumi.Input<string>;
    /**
     * Path to the GPG key ring for signing commits.
     */
    gpgKeyRing?: pulumi.Input<string>;
    /**
     * Passphrase for decrypting GPG private key.
     */
    gpgPassphrase?: pulumi.Input<string>;
    http?: pulumi.Input<inputs.ProviderGitHttp>;
    ssh?: pulumi.Input<inputs.ProviderGitSsh>;
    /**
     * Url of Git repository to bootstrap from.
     */
    url: pulumi.Input<string>;
}

export interface ProviderGitHttp {
    /**
     * Allows http Git url connections.
     */
    allowInsecureHttp?: pulumi.Input<boolean>;
    /**
     * Certificate authority to validate self-signed certificates.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * Password for basic authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * Username for basic authentication.
     */
    username?: pulumi.Input<string>;
}

export interface ProviderGitSsh {
    /**
     * The list of hostkey algorithms to use for ssh connections, arranged from most preferred to the least.
     */
    hostkeyAlgos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password of the SSH private key.
     */
    password?: pulumi.Input<string>;
    /**
     * Private key used for authenticating to the Git SSH server.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Username for Git SSH server.
     */
    username?: pulumi.Input<string>;
}

export interface ProviderKubernetes {
    /**
     * PEM-encoded client certificate for TLS authentication.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * PEM-encoded client certificate key for TLS authentication.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * PEM-encoded root certificates bundle for TLS authentication.
     */
    clusterCaCertificate?: pulumi.Input<string>;
    /**
     * Context to choose from the config file.
     */
    configContext?: pulumi.Input<string>;
    /**
     * Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
     */
    configContextAuthInfo?: pulumi.Input<string>;
    /**
     * Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
     */
    configContextCluster?: pulumi.Input<string>;
    /**
     * Path to the kube config file. Can be set with KUBE_CONFIG_PATH.
     */
    configPath?: pulumi.Input<string>;
    /**
     * A list of paths to kube config files. Can be set with KUBE_CONFIG_PATHS environment variable.
     */
    configPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kubernetes client authentication exec plugin configuration.
     */
    exec?: pulumi.Input<inputs.ProviderKubernetesExec>;
    /**
     * The hostname (in form of URI) of Kubernetes master.
     */
    host?: pulumi.Input<string>;
    /**
     * Whether server should be accessed without verifying the TLS certificate.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
     */
    password?: pulumi.Input<string>;
    /**
     * URL to the proxy to be used for all API requests.
     */
    proxyUrl?: pulumi.Input<string>;
    /**
     * Token to authenticate an service account.
     */
    token?: pulumi.Input<string>;
    /**
     * The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
     */
    username?: pulumi.Input<string>;
}

export interface ProviderKubernetesExec {
    /**
     * Kubernetes client authentication API Version.
     */
    apiVersion: pulumi.Input<string>;
    /**
     * Client authentication exec command arguments.
     */
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Client authentication exec command.
     */
    command: pulumi.Input<string>;
    /**
     * Client authentication exec environment variables.
     */
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
export namespace config {
}
