variant: flatcar
version: 1.0.0

passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICiUB1MgFciQ63LsGGBwHVjCtf1cn50BdxN9jTtfTPGF rize@legion

storage:
  links:
    - path: /etc/localtime
      target: ../usr/share/zoneinfo/Asia/Kolkata
    - target: /opt/extensions/docker-compose/docker-compose-2.34.0-x86-64.raw
      path: /etc/extensions/docker-compose.raw
      hard: false
    - path: /etc/systemd/system/multi-user.target.wants/docker.service
      target: /usr/lib/systemd/system/docker.service
      hard: false
      overwrite: true
  filesystems:
    - device: /dev/vdb
      path: /docker/appdata
      format: ext4
      label: DATA
      with_mount_unit: true
  directories:
    - path: /docker
      mode: 0755
      user:
        name: core
      group:
        name: core
    - path: /docker/appdata
      mode: 0755
      user:
        name: core
      group:
        name: core
    - path: /docker/appdata/lego
      mode: 0755
      user:
        name: core
      group:
        name: core
    - path: /docker/appdata/omni
      mode: 0755
      user:
        name: core
      group:
        name: core
    - path: /docker/appdata/omni/etcd
      mode: 0755
      user:
        name: core
      group:
        name: core
    - path: /var/lib/matchbox/profiles
      mode: 0755
    - path: /var/lib/matchbox/groups
      mode: 0755
    - path: /var/lib/matchbox/assets
      mode: 0755
  files:
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: omni
    - path: /home/core/compose.yaml
      contents:
        source: https://github.com/siderolabs/omni/raw/refs/heads/main/deploy/compose.yaml
      user:
        name: core
      group:
        name: core
    - path: /home/core/nginx.conf
      contents:
        inline: |
          events {}
          
          http {
          	proxy_redirect off;
          	proxy_http_version 1.1;

          	proxy_connect_timeout 60s;

          	# Omni needs long timeouts for the long-lived connections
          	proxy_send_timeout 1h;
          	proxy_read_timeout 1h;

          	# $connection_upgrade is used for websocket proxying
          	map $http_upgrade $connection_upgrade {
          		default upgrade;
          		'' close;
          	}

          	# Omni HTTPS redirection
          	server {
          		listen 0.0.0.0:80;
          		listen [::0]:80;
          		server_name ${OMNI_DOMAIN_NAME};
          		location / {
          			return 301 https://$host$request_uri;
          		}
          	}

          	map $http_content_type $is_grpc {
          		default 0;
          		"application/grpc" 1;
          	}

          	# Omni main API
          	server {
          		listen 0.0.0.0:443 http2 ssl;
          		listen [::0]:443 http2 ssl;
          		server_name ${OMNI_DOMAIN_NAME};
          		ssl_certificate /docker/appdata/lego/certificates/_.fossindia.ovh.crt;
          		ssl_certificate_key /docker/appdata/lego/certificates/_.fossindia.ovh.key;
          		ssl_trusted_certificate /docker/appdata/lego/certificates/_.fossindia.ovh.issuer.crt;
          		location / {
          			error_page 418 = @grpc;
          			error_page 419 = @http;

          			if ($is_grpc) {
          				return 418;
          			}

          			return 419;
          		}

          		# Omni main GRPC API
          		location @grpc {
          			# Omni needs long timeouts for the long-lived GRPC stream connections
          			grpc_read_timeout 1h;
          			grpc_send_timeout 1h;
          			grpc_pass grpc://127.0.0.1:8080;
          		}

          		# Omni main HTTP API
          		location @http {
          			proxy_pass http://127.0.0.1:8080;
          			proxy_set_header Upgrade $http_upgrade;
          			proxy_set_header Connection $connection_upgrade;
          		}
          	}

          	# Omni SideroLink (a.k.a. Machine) API
          	server {
          		listen 0.0.0.0:443 http2 ssl;
          		listen [::0]:443 http2 ssl;
          		server_name api.${OMNI_DOMAIN_NAME};
          		ssl_certificate /docker/appdata/lego/certificates/_.fossindia.ovh.crt;
          		ssl_certificate_key /docker/appdata/lego/certificates/_.fossindia.ovh.key;
          		ssl_trusted_certificate /docker/appdata/lego/certificates/_.fossindia.ovh.issuer.crt;
          		location / {
          			# Omni needs long timeouts for the long-lived GRPC stream connections
          			grpc_read_timeout 1h;
          			grpc_send_timeout 1h;
          			grpc_pass grpc://127.0.0.1:8090;
          		}
          	}

          	# Omni Kube API
          	server {
          		listen 0.0.0.0:443 http2 ssl;
          		listen [::0]:443 http2 ssl;
          		server_name kube.${OMNI_DOMAIN_NAME};
          		ssl_certificate /docker/appdata/lego/certificates/_.fossindia.ovh.crt;
          		ssl_certificate_key /docker/appdata/lego/certificates/_.fossindia.ovh.key;
          		ssl_trusted_certificate /docker/appdata/lego/certificates/_.fossindia.ovh.issuer.crt;
          		location / {
          			proxy_pass http://127.0.0.1:8100;
          			proxy_set_header Upgrade $http_upgrade;
          			proxy_set_header Connection $connection_upgrade;
          		}
          	}
          }
    - path: /home/core/omni.env
      contents:
        inline: |
          OMNI_IMG_TAG=latest
          OMNI_ACCOUNT_UUID=36267e53-f04c-431a-acc8-05e0362a10ae
          NAME=omni
          EVENT_SINK_PORT=8091
          
          ## Keys and Certs
          TLS_CERT=/docker/appdata/lego/certificates/_.fossindia.ovh.crt
          TLS_KEY=/docker/appdata/lego/certificates/_.fossindia.ovh.key
          ETCD_VOLUME_PATH=/docker/appdata/omni/etcd
          ETCD_ENCRYPTION_KEY=/docker/appdata/omni/omni.asc
          
          ## Binding
          BIND_ADDR=127.0.0.1:8080
          MACHINE_API_BIND_ADDR=127.0.0.1:8090
          K8S_PROXY_BIND_ADDR=127.0.0.1:8100
          
          ## Domains and Advertisements
          OMNI_DOMAIN_NAME="${OMNI_DOMAIN_NAME}"
          ADVERTISED_API_URL="https://${OMNI_DOMAIN_NAME}"
          SIDEROLINK_ADVERTISED_API_URL="https://api.${OMNI_DOMAIN_NAME}:8090/"
          ADVERTISED_K8S_PROXY_URL="https://kube.${OMNI_DOMAIN_NAME}:8100/"
          SIDEROLINK_WIREGUARD_ADVERTISED_ADDR="${OMNI_WG_IP}:50180"
          
          ## Users
          INITIAL_USER_EMAILS="${OMNI_ADMIN_EMAIL}"
          
          ## Authentication
          #Auth0
          AUTH='--auth-auth0-enabled=true --auth-auth0-domain=${AUTH0_DOMAIN} --auth-auth0-client-id=${AUTH0_CLIENT_ID}'
      user:
        name: core
      group:
        name: core
    - path: /opt/extensions/docker-compose/docker-compose-2.34.0-x86-64.raw
      mode: 0644
      contents:
        source: https://extensions.flatcar.org/extensions/docker-compose-2.34.0-x86-64.raw
    - path: /etc/sysupdate.docker-compose.d/docker-compose.conf
      contents:
        source: https://extensions.flatcar.org/extensions/docker-compose.conf
    - path: /etc/sysupdate.d/noop.conf
      contents:
        source: https://extensions.flatcar.org/extensions/noop.conf
    - path: /etc/systemd/network/00-eth0.network
      contents:
        inline: |
          [Match]
          Name=eth0
          
          [Network]
          DNS=192.168.3.1
          Address=192.168.3.69/24
          Gateway=192.168.3.1
    - path: /var/lib/matchbox/profiles/control-plane.json
      mode: 0644
      contents:
        inline: |
          {
            "id": "control-plane",
            "name": "control-plane",
            "boot": {
              "kernel": "/assets/vmlinuz",
              "initrd": ["/assets/initramfs.xz"],
              "args": [
                "initrd=initramfs.xz",
                "init_on_alloc=1",
                "slab_nomerge",
                "pti=on",
                "console=tty0",
                "console=ttyS0,115200n8",
                "printk.devkmsg=on",
                "talos.platform=metal",
                "talos.config=http://matchbox.example.com:8080/assets/controlplane.yaml"
              ]
            }
          }
    - path: /var/lib/matchbox/profiles/worker.json
      mode: 0644
      contents:
        inline: |
          {
            "id": "worker",
            "name": "worker",
            "boot": {
              "kernel": "/assets/vmlinuz",
              "initrd": ["/assets/initramfs.xz"],
              "args": [
                "initrd=initramfs.xz",
                "init_on_alloc=1",
                "slab_nomerge",
                "pti=on",
                "console=tty0",
                "console=ttyS0,115200n8",
                "printk.devkmsg=on",
                "talos.platform=metal",
                "talos.config=http://matchbox.example.com:8080/assets/worker.yaml"
              ]
            }
          }
    - path: /var/lib/matchbox/groups/default.json
      mode: 0644
      contents:
        inline: |
          {
            "id": "default",
            "name": "default",
            "profile": "worker"
          }
    - path: /var/lib/matchbox/assets/vmlinuz
      mode: 0644
      contents:
        source: https://github.com/siderolabs/talos/releases/latest/download/vmlinuz-amd64
    - path: /var/lib/matchbox/assets/initramfs.xz
      mode: 0644
      contents:
        source: https://github.com/siderolabs/talos/releases/latest/download/initramfs-amd64.xz

systemd:
  units:
    - name: nginx.service
      enabled: true
      contents: |
        [Unit]
        Description=Nginx Docker container
        After=network-online.target docker.service
        Requires=network-online.target docker.service

        [Service]
        ExecStartPre=docker pull docker.io/nginx:latest
        ExecStart=docker run \
          --rm \
          --name nginx \
          -p 80:80 -p 443:443 \
          -v /home/core/nginx.conf:/etc/nginx/nginx.conf:ro,Z \
          -v /docker/appdata/lego/certificates:/docker/appdata/lego/certificates:ro,Z \
          nginx:latest
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
    - name: omni.service
      enabled: true
      contents: |
        [Unit]
        After=docker.service systemd-sysext.service lego.service
        Requires=docker.service systemd-sysext.service

        [Service]
        ExecStart=/usr/bin/docker compose -f /home/core/compose.yaml --env-file /home/core/omni.env up

        [Install]
        WantedBy=multi-user.target
    - name: systemd-sysupdate.timer
      enabled: true
    - name: systemd-sysupdate.service
      dropins:
        - name: docker-compose.conf
          contents: |
            [Service]
            ExecStartPre=/usr/bin/sh -c "readlink --canonicalize /etc/extensions/docker-compose.raw > /tmp/docker-compose"
            ExecStartPre=/usr/lib/systemd/systemd-sysupdate -C docker-compose update
            ExecStartPost=/usr/bin/sh -c "readlink --canonicalize /etc/extensions/docker-compose.raw > /tmp/docker-compose-new"
            ExecStartPost=/usr/bin/sh -c "if ! cmp --silent /tmp/docker-compose /tmp/docker-compose-new; then touch /run/reboot-required; fi"
    - name: infisical-export.service
      enabled: true
      contents: |
        [Unit]
        Description=Export secrets from Infisical to env file
        After=docker.service
        Requires=docker.service
        
        [Service]
        Type=oneshot
        ExecStartPre=-/usr/bin/docker pull docker.io/infisical/cli:latest
        ExecStart=/usr/bin/bash -c '\
          export INFISICAL_TOKEN=$(docker run --rm infisical/cli:latest login \
          --method=universal-auth \
          --client-id=2669d7a3-883f-4a0b-a52e-e1b715709bc1 \
          --client-secret=${INFISICAL_CLIENT_SECRET} \
          --domain https://eu.infisical.com --silent --plain) && \
          docker run --rm \
          -e INFISICAL_TOKEN=$INFISICAL_TOKEN \
          infisical/cli:latest export --env=prod --projectId=201b912b-40de-44bf-bb83-ab1bc77554b7 \
          --path=/omni --domain https://eu.infisical.com \
          --format=dotenv > /opt/infisical.env && \
          docker run --rm \
          -e INFISICAL_TOKEN=$INFISICAL_TOKEN \
          infisical/cli:latest --env=prod --projectId=201b912b-40de-44bf-bb83-ab1bc77554b7 \
          --path=/omni/asc --domain https://eu.infisical.com secrets get OMNI_ASC --silent \
          --plain > /docker/appdata/omni/omni.asc'
        
        [Install]
        WantedBy=multi-user.target
    - name: lego.service
      enabled: true
      contents: |
        [Unit]
        Description=Lego Certificate
        Type=oneshot
        After=infisical-export.service
        Requires=docker.service

        [Service]
        ExecStartPre=-/usr/bin/docker pull docker.io/goacme/lego:latest
        ExecStart=/usr/bin/docker run \
          --name lego \
          --user 500:500 \
          --rm --env-file /opt/infisical.env \
          -v /docker/appdata/lego:/data:Z \
          docker.io/goacme/lego:latest \
          --accept-tos \
          --email certs@rizexor.com \
          --dns cloudflare \
          --domains '*.fossindia.ovh' \
          --domains fossindia.ovh \
          --path /data \
          --dns.resolvers 1.1.1.1,1.0.0.1 \
          run

        [Install]
        WantedBy=multi-user.target
    - name: matchbox.service
      enabled: true
      contents: |
        [Unit]
        Description=Matchbox Server
        Documentation=https://github.com/poseidon/matchbox
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker pull quay.io/poseidon/matchbox:latest
        ExecStart=/usr/bin/docker run \
          --name matchbox \
          --net=host \
          --rm \
          -v /var/lib/matchbox:/var/lib/matchbox:Z \
          quay.io/poseidon/matchbox:latest \
          -address=0.0.0.0:8080 \
          -log-level=debug
        ExecStop=/usr/bin/docker stop matchbox
        Restart=always
        RestartSec=10s

        [Install]
        WantedBy=multi-user.target
    - name: docker.service
      enabled: true

kernel_arguments:
  should_exist:
    - 'ip=192.168.3.69::192.168.3.1:255.255.255.0::eth0:none:8.8.8.8:8.8.4.4'
